---
layout: lab
title: Project 2
---

<div class="lab-right" markdown="1">
__Project 2__ <br>
__step 1 due:__ September 27 at 11:59pm <br>
__step 2 due:__ October 7 at 11:59pm

__submission mode:__ individual

</div>

<main markdown="1" class="lab">

## Project 2: Login Stats

<hr>

<div class="emph" markdown=1>
You may discuss any of the assignments with your classmates and tutors (or anyone else) but <span class="red"> all work for all assignments must be
entirely your own</span>. Any sharing or copying of assignments will be considered cheating (this includes posting of partial or complete
solutions on Ed, GitHub, Discord, Groupme, ... or any other forum). You should not use code generation tools to create any part of the implementation for this project. 
If you get significant help from anyone, you should acknowledge it in
your submission (and your grade will be proportional to the part that you completed on your own). You are responsible for
every line in your program: you need to know what it does and why. You should not use any data structures and features of Java
that have not been covered in class (or the prerequisite class). If you have doubts whether or not you are allowed to use certain
structures, just ask your instructor. 

If your submitted code matches closely or exactly code submitted by another person in the class, it will get a zero grade and the offense will be reported to the 
department and the dean. 
</div>

---
<br/><br/>
### Introduction and objectives

You are going to design and implement a program that allows a user to learn more 
details about logins to a remote computer system.

In any multi-user computer system, several users can be logged in at the same time. 
Moreover, the same user can be logged in simultaneously using different terminals. 
Every time a user loggs in, or loggs out, a record of it is written to a log file. Only
one user can be logged in using any given terminal at any given time. But once 
a user loggs out, another user can log in using the same terminal. 

The purpose of this project is to design a program that interacts with such a log file
and presents the results to a user in a human readable form. 


<br/><br/>

__Main goals__:

The goal of this programming project is for you to master (or at least
get practice on) the following tasks:

- working with multi-file programs
- reading data from input files
- using and understanding command line arguments
- working with potentially large data sets
- using the `ArrayList` class
- writing classes
- working with existing code
- extending existing classes (inheritance)
- parsing data
- working with exception handling

Many of the skills that you need to complete this project
are based on the material covered in cs101. But there might be certain
topics for which you did not have to write a program or that you forgot.
Make sure to ask questions during recitations, in class and on Ed.

**Start early!** This project requires you to write several classes and
debugging always takes time.


<div class="wrap-collabsible">
<input id="interface" class="toggle" type="checkbox"  >
<label for="interface" class="lbl-toggle"> User Interface </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

Your program has to be a console based program (no graphical interface) - this
means that the program should not open any windows or dialogs to prompt user
for the input.

</div> </div></div>

<div class="wrap-collabsible">
<input id="usage" class="toggle" type="checkbox"  >
<label for="usage" class="lbl-toggle"> Program Usage and Input File</label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

#### Program Usage 

The user may start the program from the command line or run it within an IDE like
Eclipse - __from the point of view of your program this does not matter__.
The program expects one command line argument. When the user runs the program, they provide the name of the input
file as a command line argument. (This way the user can specify a different data set - for example, a log file from a different system, or a subset of records from a given time range).

If the name of the input file provided as a command line argument is incorrect or the file cannot be
opened for any reason, the program should display an error message and terminate. It should not prompt the user for
an alternative name of the file.

If the program is run without any arguments, the program should display an error message and terminate. It should not prompt the user
for the name of the file.

The error messages should be specific and informative, for example:

`Error: the file logs.log cannot be opened.`

or

`Usage Error: the program expects file name as an argument.`

The above error messages generated by your code should be written to the `System.err` stream (not the
`System.out` stream). If you are not sure what the difference is, research it or ask questions.

#### Input File

The input file contains the login and logout records one per line.
Each line is of the format:

`TERMINAL TIME USERNAME`

For example:

```
1 71234567890 joanna
2 71234569890 satya
-1 71934567890 joanna
3 71934597890 vincent
1 71954597890 chenfeiyu
4 71954797890 joanna
5 71954798000 vincent
-5 71955797890 vincent
-4 71964597890 joanna
-2 72954597890 satya
-1 72994597890 chenfeiyu
```

`TERMINAL` is an integer indicating the terminal number. Positive values 
indicate a login record.  A negative sign in from of the terminal number indicates a logout record. 
In the above example, the user `satya` logged in on terminal 2: second record
from the top shows their login, the second record from the bottom shows their logout.

`TIME` is the time at which the login or logout took place. It is
indicated as the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT. (This value can be large, so it should be stored in 
a variable of type `long`.)

`USERNAME` is the name of the user.

For this project, the input file is guaranteed to be in chronological order of time. It is also guaranteed to be _correct_. This means that
- there are never any two concurrent sessions with the same terminal value (but the same user could be logged in on different terminals), 
- the terminals are always positive integers (and their negated values indicate logout from that terminal), 
- the usernames are strings containing alphanumeric characters and '_' only (no spaces in usernames).
 

</div> </div></div>

<div class="wrap-collabsible">
<input id="user" class="toggle" type="checkbox"  >
<label for="user" class="lbl-toggle"> User Interaction </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>


The program should run in a loop that allows the user to issue different queries.
The three types of queries are:

- `first USERNAME`
- `last USERNAME`
- `quit`

In the above, the words in uppercase indicate keywords that will be replaced by
actual values, for example `first joanna` or `last daniel_jin`.

In the first case, `first USERNAME`, the program should display the
information about the first login session for the specified user. A **login session**
is a pair of a login record and a logout record with the same username and the 
same terminal. In other words, it describes when the user logged in and logged out of the system. 
If there are concurrent login sessions for the same user, the _first_ one is determined by the 
earlier login record. 

In the second case, `last USERNAME`,  the program should display the information 
about the last login session for the specified user. If there are concurrent login sessions for the same user, 
the _last one is determined by the later logout record. 

Finally when the program user types "quit" the program terminates. 


__The user should not be prompted for any other response.__

If the query entered by the user is invalid, the program should display an error message:

`    This is not a valid query. Try again. `

and allow the user to provide an alternative command.

If the command entered by the user does not return any results,  the program should print
a message

`    "No user matching USERNAME found. `

(in which `USERNAME` is replaced by the actual username used in the user's command) and allow the user to provide an alternative command.




__Matching result display:__

If the query entered by the user matches a usernae, the information  should be displayed in the following format:

```
USERNAME, terminal TERMINAL, duration DURATION
  logged in: LOGIN_TIME
  logged out: LOGOUT_TIME
```

(See the `Session` class description below for explanation of each field.)



__Sample interaction:__

Sample user interaction is shown in the Appendix.


</div> </div></div>

<div class="wrap-collabsible">
<input id="classes" class="toggle" type="checkbox" >
<label for="classes" class="lbl-toggle"> Data Storage and Organization </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

You need to provide an implementation of several classes that store the data and
compute the results when the program is executed.

In particular, your program must implement and use the following classes.
You may implement additional classes and additional methods in the required classes, if you wish.

You cannot change the signatures of methods that are required. 

#### <code class="code_title">Record</code> class

This class should represent the individual records from the input log file.

- This class should provide the four-parameter constructor that validates the information and 
creates the requested `Record` object.  

	`public Record(int terminal, boolean login, String username, Date time)`

	A valid terminal should be a positive integer. The `login` is a `boolean` value
    that indicates if a given `Record` object represents a login record (if `login` is `true`) or logout record (if `login` is `false`).
    The `username` is the name of the user. And the `time` is a `Date` object that 
    represents the date and time at which the user logged in or logged out. (See the 
    [`Date` class](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Date.html). ) 
    
    If this constructor is called with an invalid value for the terminal number, it should throw an instance of 
	`IllegalArgumentException` with an appropriate message.

	There should be no default constructor.

- This class should provide several accessor (getter) methods that return the values stored in the object:

	`public int getTerminal()`

    `public boolean isLogin()`
    
    `public boolean isLogout()`
    
    `public String getUsername()`
    
    `public Date getTime()`


#### <code class="code_title">Session</code> class

This class should represent a single login session. 

- This class should provide the two-parameter constructor that constructs a `Session` object based on
a login record and logout record:

	`public Session (Record login, Record logout)`

	A valid pair of records has to have matching usernames and matching terminal numbers (otherwise they do not represent a single login session). The `login` record cannot be `null`. 
    The `logout` record can be `null` (this indicates that the user is still logged in on the system). The time associated with the login time should be no greater than the time associated with the logout time. 
    
    If this constructor is called with invalid parameters, it should throw an instance of
	`IllegalArgumentException` with an appropriate message.

	There should be no default constructor.

- This class should provide the following accessor (getter) methods:
    
    `public int getTerminal()`
    
    `public Date getLoginTime()`

    `public Date getLogoutTime()`

    `public String getUsername()`
    
    `public long getDuration()` - returns the number of milliseconds ellapsed between the login time and logout time, or -1 if the session is still active;  

- The class should override the `toString` method from the `Object` class. It should
	return a `String` matching the following pattern

	```
    USERNAME, terminal TERMINAL, duration DURATION
      logged in: LOGIN_TIME
      logged out: LOGOUT_TIME
    ```

	
    All the words in uppercase letters are place-holders for the actual values from the log file.
    
    If the user is still logged in, the DURATION should be replaced by the string "active session". In all other cases it should show the number of whole days, hours, minutes and seconds. The format for the duration should be as follows:
    
    `     DAYS days, HOURS hours, MINUTES minutes, SECONDS seconds` 
    
    
    If the user is still logged in, the LOGOUT_TIME should be replaced by the string "still logged in". In all other cases the LOGIN_TIME and LOGOUT_TIME should use the format

    `dow mon dd hh:mm:ss zzz yyyy`

    where:

    - `dow` is the three letter day of the week specification (Sun, Mon, Tue, Wed, Thu, Fri, Sat).
    - `mon` is the three letter month specification (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec).
    - `dd` is the day of the month (01 through 31), as two decimal digits.
    - `hh` is the hour of the day (00 through 23), as two decimal digits.
    - `mm` is the minute within the hour (00 through 59), as two decimal digits.
    - `ss` is the second within the minute (00 through 61, as two decimal digits.
    - `zzz` is the time zone (and may reflect daylight saving time). Standard time zone abbreviations include those recognized by the method parse. If time zone information is not available, then zzz is empty - that is, it consists of no characters at all.
    - `yyyy` is the year, as four decimal digits. 
    
    (HINT: the above date/time representation is identical to the one returned by the `toString()` 
    method of the `Date` class.)
    
    Here is an example of the complete output following this format: 
    
    ```
    
	satya, terminal 2, duration   19 days, 21 hours, 47 minutes,  8 seconds
	  logged in: Tue Apr 04 06:22:49 EST 1972
	  logged out: Mon Apr 24 04:09:57 EST 1972
	```

#### <code class="code_title">RecordList</code> class
The `RecordList` class should be used to store all the `Record` objects.
This class should inherit from the   `ArrayList<Record>` class. 

- The class needs to provide a default constructor that creates an empty `RecordList` object. (Do not overthink this requirement, but ask questions if you are not sure how to do this.)

In addition, the class should implement the following two methods:

- `public Session getFirstSession(String user) `

	This method should construct and return the first login session for the specified `user`. If there are multiple login session for the specified user, the _first_ one is the one with the earliest login time. Note that in some cases this session may still be active. 

	If the specified `user` does not match any of the records in the list, the 
    function should throw an instance of `NoSuchElementException` with an appropriate 
    message.
    
    A valid argument to this function is a non-null, non-empty string. If the function 
    is called with an invalid argument, it should throw an instance of `IllegalArgumentException` with
    an appropriate message. 

- `public Session getLastSession(String user) `

	This method should return the last login session for the specified `user`. If there are multiple login session for the specified user, the _last_ one is the one with the latest login time. Note that in some cases this session may still be active. 

	If the specified `user` does not match any of the records in the list, the 
    function should throw an instance of `NoSuchElementException` with an appropriate 
    message.
    
    A valid argument to this function is a non-null, non-empty string. If the function 
    is called with an invalid argument, it should throw an instance of `IllegalArgumentException` with
    an appropriate message. 




#### <code class="code_title">LoginStats</code> class
The `LoginStats` class is the actual program. This is the class that should contain the `main` method.
It is responsible for opening and reading
the data file, obtaining user input, performing some data validation and handling
all errors that may occur (in particular, it should handle any
exceptions thrown by your other classes and terminate gracefully, if need be, with
a friendly error message presented to the user: The program should never just reprint the
exception message as a way of handling an exception. These messages are rarely
readable to the ordinary user and make it seem like the program crashed in response to the exception.

You may implement other methods in this class to modularize the design.

</div> </div></div>

<div class="wrap-collabsible">
<input id="rules" class="toggle" type="checkbox"  >
<label for="rules" class="lbl-toggle"> Programming Rules </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>


- You should follow the rules outlined in the document
[Code conventions](https://cs.nyu.edu/~joannakl/cs102/notes/CodeConventions.pdf)
posted on the course website.

- The data file should be read only once! Your program needs to store the data in memory resident data structures.

- You may not use any of the collection
classes that were not covered in cs101 (for this assignment, do not use `LinkedList`, `Stack`, `Queue`, `PriorityQueue`, or any classes implementing the `Map` interface). You can, and should, use the `ArrayList` class.

- You may use any exception-related classes.

- You may use any classes to handle the file I/O, but probably the simplest ones
are `File` and `Scanner` classes. You are responsible for knowing how to use the classes that you select.

- The `LoginStats` class is responsible for reading input from standard input and printing output to standard output. 
No other classes should be reading from or writing to those streams. 

</div> </div></div>

<div class="wrap-collabsible">
<input id="working" class="toggle" type="checkbox"  >
<label for="working" class="lbl-toggle"> Working on This Assignment </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

- __You should start right away!__
- You should modularize your design so that you can test it regularly: for example, implement the part of the code that reads and parses the input file, then implement and test individual classes, then implement the part that provides the interactive part of the program, ... .
- Make sure that at all times you __have a working program!__
You should also implement stubs of every method that return `0` or `null`. This way your code compiles, even though it may
not work completely.  You can implement methods that perform one task at a time.
This way, if you run out of time, at least parts of your program will be functioning properly.
- You should make sure that you are __testing the program on small data sets__ for which you can determine the correct
output manually. You can create  a test input file that contains only a few rows.
- You should make sure that your program's results are consistent with what is described in this specification
by running the program on carefully designed test inputs and examining
the outputs produced to make sure they are correct.
The goal in doing this is to try to find the mistakes you have most likely made in your code. <br>
<!--
__DO NOT__ test your program on the entire large input file. This may take a long time and you will never know
if the results are correct or not.
-->
- Each class that you submit __will be tested by itself without the context of other classes that you are implementing for this assignment__. <br>
This means that you need to make sure that your methods can perform their tasks correctly even if they are executed in situations that would not
arise in the context of this specific program.
- You should __backup__ your code after each time you spend some time working on it.
Save it to a flash drive, email it to yourself, upload it to your Google drive, push it to a private git repository,
do anything that gives you a second (or maybe third copy). Computers tend to break just a few days or even
a few hours before the due dates - make sure that you have working code if that happens.

</div> </div></div>

<div class="wrap-collabsible">
<input id="grading" class="toggle" type="checkbox"  >
<label for="grading" class="lbl-toggle"> Grading and Submissions</label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

This project will be submitted in two steps. The first step is designed to make sure that you have a good starting point for the project and that 
you setup all your tools and submission properly to send you on a path to success in the second step. The second step is going to be your final submission.
In each step you can submit as many times as you wish before the due date. You cannot use your _freebie days_ for step one of the project. You can
request to use them for the second part. 

#### Step One (due September 27 at 11:59 PM)

You will be working on this part in recitations on Friday. The deliverable for this step are documented stub files for each class. Here is an example 
of such a sub file for a class called `Point2D` that is designed to represent a point in two-dimensional space. 

```
package project2; 

/**
 * The Point2D class represents a point in 2D space with x and y coordinates.
 */
public class Point2D {

    // Instance variables for the x and y coordinates
    private int x;
    private int y;

    /**
     * Default constructor that initializes the coordinates to (0, 0).
     */
    public Point2D() {
        // TODO: Implement this method.
    }

    /**
     * Constructor that initializes the coordinates to the given values.
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    public Point2D(int x, int y) {
        // TODO: Implement this method.
    }

    /**
     * Returns the x coordinate.
     * @return The x coordinate.
     */
    public int getX() {
        // TODO: Implement this method.
        return 0;
    }

    /**
     * Sets the x coordinate to the given value.
     * @param x The new x coordinate.
     */
    public void setX(int x) {
        // TODO: Implement this method.
    }

    /**
     * Returns the y coordinate.
     * @return The y coordinate.
     */
    public int getY() {
        // TODO: Implement this method.
        return 0;
    }

    /**
     * Sets the y coordinate to the given value.
     * @param y The new y coordinate.
     */
    public void setY(int y) {
        // TODO: Implement this method.
    }

    /**
     * Returns a string representation of the point in the format (x, y).
     * @return A string representation of the point.
     */
    @Override
    public String toString() {
        // TODO: Implement this method.
        return "";
    }
}

```

The above class does not have any implementation, but it compiles and other classes can make calls to methods 
provided by this class. Of course, these method calls will not return correct results. The stub class does not need to mention all data fields
that will be required for the final implementation, but it is a good idea to list the ones that are definitely need to be part of the class. 

Your job for step one is to create documented stubs like this for every required class. DO NOT submit any implementation for this step. 
Make sure that you document the classes and methods using Javadoc style. 

#### Step 2 (due October 7 at 11:59 PM)

In the second step, you will need to implement the actual code for all the classes. 

If your program does not compile (should not be the case if you submitted step 1 successfully) or if it crashes (almost) every time it is run,
you will get a zero on the assignment. Make sure that you are submitting
functioning code, even if it is not a complete implementation so that you can get partial credit.

#### Grading 

The grade will be determined by several factors: 

- 20 points: (based on step 1 submission) proper documentation, format of submission, and stub-only implementation
   (this will be determined by a the autograder and the code review); if your step 2 submission omits the documentation, 
   you will likely lose most if not all points awarded for step 1 submission; if your step 1 submission misses the 
   documentation, but you include complete documentation in your 
   step 2 submission, you will get half of the credit for this part
- 45 points: class correctness: correct behavior of methods of the required classes (this will be determined by the autograder), these points will be assigned as follows:
	- 0 points: code passes fewer than a half of the autograder tests 
	- 20 points: code passes [50-70)% of the autograder tests 
	- 35 points: the code passes [70-80)% of the autograder tests
	- 40 points: the code passes [80-90)% of the autograder tests 
	- 45 points: the code passes 90% or more of the autograder tests 	
- 10 points: correct behavior of the program as a whole (this will be determined by the autograder and some manual evaluation)
- 25 points: design and the implementation of the required classes and any additional classes
   (this will be determined by a code review)

</div> </div></div>


<div class="wrap-collabsible">
<input id="submit" class="toggle" type="checkbox" >
<label for="submit" class="lbl-toggle"> How and What to Submit </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

The submission format and requirements are the same for both steps. 

__For the purpose of grading, your project must be be in the package called `project2`.
This means that each of your submitted source code files should start with a line:__

`package project2;`


Your should submit all your source code files (the ones with `.java` extensions only) to Gradescope. __DO NOT__ submit `.class` files
or any project files that your IDE might produce. Do not submit the data
file or any data files that you might have created. 
Once you submit, you should look at all the files that Gradescope has - make sure there is nothing there that should not be there. 

You may resubmit to Gradescope as many times as you wish before the submission link closes. But if you resubmit
after the grace period ends, your assignment will be subject to the late point deductions, unless you request to use your freebie days once you make your final submission.

For this project, you will see some of the results for the autograded unit tests. Some of the results will be hidden. (When some results are hidden, Gradescope does not display the score for the autograded part. )


</div> </div></div>


<div class="wrap-collabsible">
<input id="appendix" class="toggle" type="checkbox" >
<label for="appendix" class="lbl-toggle"> Appendix </label>
<div class="collapsible-content" markdown=1>
<div class="content-inner" markdown=1>

#### Sample Interactions

Here is a sample run of a program with the short input file shown at the 
top of this specification: 

```
Welcome to Login Stats!

Available commands: 
  first USERNAME   -   retrieves first login session for the USER
  last USERNAME    -   retrieves last login session for the USER
  quit             -   terminates this program 


first joanna
joanna, terminal 1, duration    8 days,  2 hours, 26 minutes, 40 seconds
 logged in: Tue Apr 04 06:22:47 EST 1972
 logged out: Wed Apr 12 08:49:27 EST 1972
 
last joanna
joanna, terminal 4, duration    0 days,  2 hours, 43 minutes, 20 seconds
 logged in: Wed Apr 12 14:26:37 EST 1972
 logged out: Wed Apr 12 17:09:57 EST 1972
 
first vincent
vincent, terminal 3, duration active session
 logged in: Wed Apr 12 08:49:57 EST 1972
 logged out: still logged in
 
last vincent
vincent, terminal 5, duration    0 days,  0 hours, 16 minutes, 39 seconds
 logged in: Wed Apr 12 14:26:38 EST 1972
 logged out: Wed Apr 12 14:43:17 EST 1972
 
first chenfeiyu
chenfeiyu, terminal 1, duration   12 days,  0 hours, 53 minutes, 20 seconds
 logged in: Wed Apr 12 14:23:17 EST 1972
 logged out: Mon Apr 24 15:16:37 EST 1972
 
last chenfeiyu
chenfeiyu, terminal 1, duration   12 days,  0 hours, 53 minutes, 20 seconds
 logged in: Wed Apr 12 14:23:17 EST 1972
 logged out: Mon Apr 24 15:16:37 EST 1972
 
first bruno
No user matching bruno found

next joanna
Error: this is not a valid command. Try again.

last satya
satya, terminal 2, duration   19 days, 21 hours, 47 minutes,  8 seconds
 logged in: Tue Apr 04 06:22:49 EST 1972
 logged out: Mon Apr 24 04:09:57 EST 1972
quit
```

</div> </div></div>


</main>
